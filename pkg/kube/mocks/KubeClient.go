// Code generated by mockery v1.0.0
package mocks

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
import mock "github.com/stretchr/testify/mock"
import v1 "k8s.io/client-go/pkg/api/v1"
import v1beta1 "k8s.io/client-go/pkg/apis/policy/v1beta1"

// KubeClient is an autogenerated mock type for the KubeClient type
type KubeClient struct {
	mock.Mock
}

// DeleteNode provides a mock function with given fields: node
func (_m *KubeClient) DeleteNode(node *v1.Node) error {
	ret := _m.Called(node)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Node) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EvictPod provides a mock function with given fields: eviction
func (_m *KubeClient) EvictPod(eviction *v1beta1.Eviction) error {
	ret := _m.Called(eviction)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1beta1.Eviction) error); ok {
		r0 = rf(eviction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNode provides a mock function with given fields: name
func (_m *KubeClient) GetNode(name string) (*v1.Node, error) {
	ret := _m.Called(name)

	var r0 *v1.Node
	if rf, ok := ret.Get(0).(func(string) *v1.Node); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodes provides a mock function with given fields:
func (_m *KubeClient) ListNodes() (*v1.NodeList, error) {
	ret := _m.Called()

	var r0 *v1.NodeList
	if rf, ok := ret.Get(0).(func() *v1.NodeList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.NodeList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPods provides a mock function with given fields: namespace, options
func (_m *KubeClient) ListPods(namespace string, options metav1.ListOptions) (*v1.PodList, error) {
	ret := _m.Called(namespace, options)

	var r0 *v1.PodList
	if rf, ok := ret.Get(0).(func(string, metav1.ListOptions) *v1.PodList); ok {
		r0 = rf(namespace, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PodList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, metav1.ListOptions) error); ok {
		r1 = rf(namespace, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PodDisruptionBudgets provides a mock function with given fields: namespace
func (_m *KubeClient) PodDisruptionBudgets(namespace string) (*v1beta1.PodDisruptionBudgetList, error) {
	ret := _m.Called(namespace)

	var r0 *v1beta1.PodDisruptionBudgetList
	if rf, ok := ret.Get(0).(func(string) *v1beta1.PodDisruptionBudgetList); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.PodDisruptionBudgetList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNode provides a mock function with given fields: node
func (_m *KubeClient) UpdateNode(node *v1.Node) error {
	ret := _m.Called(node)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Node) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
