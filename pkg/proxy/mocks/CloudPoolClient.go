// Code generated by mockery v1.0.0
package mocks

import cloudpool "github.com/elastisys/kubeaware-cloudpool-proxy/pkg/cloudpool"
import http "net/http"
import mock "github.com/stretchr/testify/mock"

// CloudPoolClient is an autogenerated mock type for the CloudPoolClient type
type CloudPoolClient struct {
	mock.Mock
}

// Forward provides a mock function with given fields: request
func (_m *CloudPoolClient) Forward(request *http.Request) (*http.Response, error) {
	ret := _m.Called(request)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMachine provides a mock function with given fields: machineID
func (_m *CloudPoolClient) GetMachine(machineID string) (*cloudpool.Machine, error) {
	ret := _m.Called(machineID)

	var r0 *cloudpool.Machine
	if rf, ok := ret.Get(0).(func(string) *cloudpool.Machine); ok {
		r0 = rf(machineID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudpool.Machine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(machineID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMachinePool provides a mock function with given fields:
func (_m *CloudPoolClient) GetMachinePool() (*cloudpool.MachinePoolMessage, error) {
	ret := _m.Called()

	var r0 *cloudpool.MachinePoolMessage
	if rf, ok := ret.Get(0).(func() *cloudpool.MachinePoolMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudpool.MachinePoolMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPoolSize provides a mock function with given fields:
func (_m *CloudPoolClient) GetPoolSize() (*cloudpool.PoolSizeMessage, error) {
	ret := _m.Called()

	var r0 *cloudpool.PoolSizeMessage
	if rf, ok := ret.Get(0).(func() *cloudpool.PoolSizeMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudpool.PoolSizeMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDesiredSize provides a mock function with given fields: desiredSize
func (_m *CloudPoolClient) SetDesiredSize(desiredSize int) error {
	ret := _m.Called(desiredSize)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(desiredSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TerminateMachine provides a mock function with given fields: machineID, decrementDesiredSize
func (_m *CloudPoolClient) TerminateMachine(machineID string, decrementDesiredSize bool) error {
	ret := _m.Called(machineID, decrementDesiredSize)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(machineID, decrementDesiredSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
