// Code generated by mockery v1.0.0
package mocks

import kube "github.com/elastisys/kubeaware-cloudpool-proxy/pkg/kube"
import mock "github.com/stretchr/testify/mock"

// NodeScaler is an autogenerated mock type for the NodeScaler type
type NodeScaler struct {
	mock.Mock
}

// DeleteNode provides a mock function with given fields: node
func (_m *NodeScaler) DeleteNode(node *kube.NodeInfo) error {
	ret := _m.Called(node)

	var r0 error
	if rf, ok := ret.Get(0).(func(*kube.NodeInfo) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DrainNode provides a mock function with given fields: victimNode
func (_m *NodeScaler) DrainNode(victimNode *kube.NodeInfo) error {
	ret := _m.Called(victimNode)

	var r0 error
	if rf, ok := ret.Get(0).(func(*kube.NodeInfo) error); ok {
		r0 = rf(victimNode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNode provides a mock function with given fields: name
func (_m *NodeScaler) GetNode(name string) (*kube.NodeInfo, error) {
	ret := _m.Called(name)

	var r0 *kube.NodeInfo
	if rf, ok := ret.Get(0).(func(string) *kube.NodeInfo); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kube.NodeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsScaleDownCandidate provides a mock function with given fields: node
func (_m *NodeScaler) IsScaleDownCandidate(node *kube.NodeInfo) (bool, error) {
	ret := _m.Called(node)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*kube.NodeInfo) bool); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kube.NodeInfo) error); ok {
		r1 = rf(node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodes provides a mock function with given fields:
func (_m *NodeScaler) ListNodes() ([]*kube.NodeInfo, error) {
	ret := _m.Called()

	var r0 []*kube.NodeInfo
	if rf, ok := ret.Get(0).(func() []*kube.NodeInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kube.NodeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkerNodes provides a mock function with given fields:
func (_m *NodeScaler) ListWorkerNodes() ([]*kube.NodeInfo, error) {
	ret := _m.Called()

	var r0 []*kube.NodeInfo
	if rf, ok := ret.Get(0).(func() []*kube.NodeInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kube.NodeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeLoad provides a mock function with given fields: node
func (_m *NodeScaler) NodeLoad(node *kube.NodeInfo) float64 {
	ret := _m.Called(node)

	var r0 float64
	if rf, ok := ret.Get(0).(func(*kube.NodeInfo) float64); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}
